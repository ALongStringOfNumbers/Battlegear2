--- 
+++ 
@@ -7,6 +7,9 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+
+import mods.battlegear2.common.BattleGear;
+import mods.battlegear2.common.inventory.InventoryPlayerBattle;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
@@ -39,6 +42,23 @@
 @SideOnly(Side.CLIENT)
 public class GuiIngame extends Gui
 {
+	/*
+	 * Mine & Blade: Notes
+	 * Edits made by: nerd-boy
+	 * 
+	 * Edits: 3
+	 * Added Methods: 0
+	 * Added Fields: 0
+	 * 
+	 * The 1st 2 edits are required to switch between the battlemode and normal inventory bar rendering.
+	 * The 3rd edit is to prevent an index out of bounds error
+	 * 
+	 * These edits probably done even need to be done. We could render the extra slots on the side
+	 * of the inventory bar like the old battlegear. This would eliminate the need of this class
+	 * Transformer. This is probably the best way to go (I will keep it like this for now because cbf'd
+	 * making a new GUI class)
+	 */
+	
     private static final RenderItem itemRenderer = new RenderItem();
     private final Random rand = new Random();
     private final Minecraft mc;
@@ -120,12 +140,19 @@
 
         if (!this.mc.playerController.enableEverythingIsScrewedUpMode())
         {
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        	GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
             this.mc.renderEngine.func_98187_b("/gui/gui.png");
             InventoryPlayer inventoryplayer = this.mc.thePlayer.inventory;
             this.zLevel = -90.0F;
-            this.drawTexturedModalRect(k / 2 - 91, l - 22, 0, 0, 182, 22);
-            this.drawTexturedModalRect(k / 2 - 91 - 1 + inventoryplayer.currentItem * 20, l - 22 - 1, 0, 22, 24, 22);
+            //-----MB-Edited-----
+            if(mc.thePlayer.isBattlemode()){
+            	this.mc.renderEngine.func_98187_b(BattleGear.imageFolder+"gui/Battlegear-IngameGUI.png");
+            	this.drawTexturedModalRect(k / 2 - 91, l - 22, 0, 0, 182, 22);
+            	this.drawTexturedModalRect(k / 2 - 91 - 1 + (inventoryplayer.currentItem-InventoryPlayerBattle.OFFSET) * 70, l - 22 - 1, 0, 22, 24+24, 22);
+            }else{
+            	this.drawTexturedModalRect(k / 2 - 91, l - 22, 0, 0, 182, 22);
+            	this.drawTexturedModalRect(k / 2 - 91 - 1 + inventoryplayer.currentItem * 20, l - 22 - 1, 0, 22, 24, 22);
+            }
             this.mc.renderEngine.func_98187_b("/gui/icons.png");
             GL11.glEnable(GL11.GL_BLEND);
             GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
@@ -351,11 +378,21 @@
             GL11.glEnable(GL12.GL_RESCALE_NORMAL);
             RenderHelper.enableGUIStandardItemLighting();
 
-            for (i2 = 0; i2 < 9; ++i2)
-            {
-                i4 = k / 2 - 90 + i2 * 20 + 2;
-                j2 = l - 16 - 3;
-                this.renderInventorySlot(i2, i4, j2, par1);
+            if(mc.thePlayer.isBattlemode()){
+            	for (i2 = 0; i2 < 3; ++i2)
+            	{
+            		i4 =k / 2 - 90 + i2 * 70 + 2;
+            		j2 = l - 16 - 3;
+            		this.renderInventorySlot(i2+InventoryPlayerBattle.OFFSET, i4, j2, par1);
+            		this.renderInventorySlot(i2+InventoryPlayerBattle.OFFSET+InventoryPlayerBattle.WEAPON_SETS, i4+20, j2, par1);
+            	}	
+            }else{
+	            for (i2 = 0; i2 < 9; ++i2)
+	            {
+	                i4 = k / 2 - 90 + i2 * 20 + 2;
+	                j2 = l - 16 - 3;
+	                this.renderInventorySlot(i2, i4, j2, par1);
+	            }
             }
 
             RenderHelper.disableStandardItemLighting();
@@ -818,7 +855,8 @@
      */
     private void renderInventorySlot(int par1, int par2, int par3, float par4)
     {
-        ItemStack itemstack = this.mc.thePlayer.inventory.mainInventory[par1];
+    	//-----MB-Edited-----
+    	ItemStack itemstack = this.mc.thePlayer.inventory.getStackInSlot(par1);
 
         if (itemstack != null)
         {
