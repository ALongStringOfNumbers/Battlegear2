--- 
+++ 
@@ -13,6 +13,22 @@
 
 public class InventoryPlayer implements IInventory
 {
+	/*
+	 * Mine & Blade: Notes
+	 * Edits made by: nerd-boy
+	 * 
+	 * Edits: 14
+	 * Added Methods: 2
+	 * Added Fields: 4 (3 static)
+	 * 
+	 * This will be by far and large the most difficult class to edit with a total of 14 edits not
+	 * including the additions to fields and methods. To alleviate the edits we could replace
+	 * the instance of inventoryPlayer with a subclass that will perform the edits we require. This 
+	 * however could impact on compatibility. In either case we would likely require the addition
+	 * of the fields and method (but those are much easier)
+	 */
+	
+	
     /**
      * An array of 36 item stacks indicating the main player inventory (including the visible bar).
      */
@@ -31,6 +47,14 @@
     /** The player whose inventory this is. */
     public EntityPlayer player;
     private ItemStack itemStack;
+    
+    
+    //-----MB-AddFields(4)-----
+    public static final int WEAPON_SETS = 3;
+    public static final int MAXSIZE = WEAPON_SETS*2 + 4 + 6;
+    public static final int offset = 150;
+    private ItemStack[] extraInventory = new ItemStack[MAXSIZE];
+    
 
     /**
      * Set true whenever the inventory changes. Nothing sets it false so you will have to write your own code to check
@@ -48,7 +72,9 @@
      */
     public ItemStack getCurrentItem()
     {
-        return this.currentItem < 9 && this.currentItem >= 0 ? this.mainInventory[this.currentItem] : null;
+    	//-----MB-EDITED-----
+        return isBattlemode() || (this.currentItem < 9 && this.currentItem >= 0) ?
+        		getStackInSlot(currentItem) : null;
     }
 
     /**
@@ -128,37 +154,40 @@
      */
     public void setCurrentItem(int par1, int par2, boolean par3, boolean par4)
     {
-        boolean var5 = true;
-        this.currentItemStack = this.getCurrentItem();
-        int var7;
-
-        if (par3)
-        {
-            var7 = this.getInventorySlotContainItemAndDamage(par1, par2);
-        }
-        else
-        {
-            var7 = this.getInventorySlotContainItem(par1);
-        }
-
-        if (var7 >= 0 && var7 < 9)
-        {
-            this.currentItem = var7;
-        }
-        else
-        {
-            if (par4 && par1 > 0)
-            {
-                int var6 = this.getFirstEmptyStack();
-
-                if (var6 >= 0 && var6 < 9)
-                {
-                    this.currentItem = var6;
-                }
-
-                this.func_70439_a(Item.itemsList[par1], par2);
-            }
-        }
+    	//-----MB-Edited-----
+    	if(!isBattlemode()){
+	        boolean var5 = true;
+	        this.currentItemStack = this.getCurrentItem();
+	        int var7;
+	
+	        if (par3)
+	        {
+	            var7 = this.getInventorySlotContainItemAndDamage(par1, par2);
+	        }
+	        else
+	        {
+	            var7 = this.getInventorySlotContainItem(par1);
+	        }
+	
+	        if (var7 >= 0 && var7 < 9)
+	        {
+	            this.currentItem = var7;
+	        }
+	        else
+	        {
+	            if (par4 && par1 > 0)
+	            {
+	                int var6 = this.getFirstEmptyStack();
+	
+	                if (var6 >= 0 && var6 < 9)
+	                {
+	                    this.currentItem = var6;
+	                }
+	
+	                this.func_70439_a(Item.itemsList[par1], par2);
+	            }
+	        }
+    	}
     }
 
     @SideOnly(Side.CLIENT)
@@ -177,15 +206,26 @@
         {
             par1 = -1;
         }
-
-        for (this.currentItem -= par1; this.currentItem < 0; this.currentItem += 9)
-        {
-            ;
-        }
-
-        while (this.currentItem >= 9)
-        {
-            this.currentItem -= 9;
+        
+        //-----MB-Edited-----
+        if(isBattlemode()){
+        	for (this.currentItem -= par1; this.currentItem < offset; this.currentItem += 3)
+	        {;}
+        	while (this.currentItem >= 3+offset)
+	        {
+	            this.currentItem -= 3;
+	        }
+        	
+        }else{
+	        for (this.currentItem -= par1; this.currentItem < 0; this.currentItem += 9)
+	        {
+	            ;
+	        }
+	
+	        while (this.currentItem >= 9)
+	        {
+	            this.currentItem -= 9;
+	        }
         }
     }
 
@@ -217,6 +257,18 @@
             {
                 var3 += var5.stackSize;
                 this.armorInventory[var4] = null;
+            }
+        }
+        
+        //-----MB-Edited-----
+        for (var4 = 0; var4 < this.extraInventory.length; ++var4)
+        {
+            var5 = this.extraInventory[var4];
+
+            if (var5 != null && (par1 <= -1 || var5.itemID == par1) && (par2 <= -1 || var5.getItemDamage() == par2))
+            {
+                var3 += var5.stackSize;
+                this.extraInventory[var4] = null;
             }
         }
 
@@ -426,6 +478,12 @@
     public ItemStack decrStackSize(int par1, int par2)
     {
         ItemStack[] var3 = this.mainInventory;
+        
+        //-----MB-Edited-----
+        if(par1 >= offset){
+        	var3 = extraInventory;
+        	par1 -= offset;
+        }
 
         if (par1 >= this.mainInventory.length)
         {
@@ -468,6 +526,12 @@
     public ItemStack getStackInSlotOnClosing(int par1)
     {
         ItemStack[] var2 = this.mainInventory;
+        
+        //-----MB-Edited-----
+        if(par1 >= offset){
+        	var2 = extraInventory;
+        	par1 -= offset;
+        }
 
         if (par1 >= this.mainInventory.length)
         {
@@ -494,6 +558,12 @@
     {
         ItemStack[] var3 = this.mainInventory;
 
+        //-----MB-Edited-----
+        if(par1 >= offset){
+        	var3 = extraInventory;
+        	par1 -= offset;
+        }
+        
         if (par1 >= var3.length)
         {
             par1 -= var3.length;
@@ -509,10 +579,17 @@
     public float getStrVsBlock(Block par1Block)
     {
         float var2 = 1.0F;
-
-        if (this.mainInventory[this.currentItem] != null)
-        {
-            var2 *= this.mainInventory[this.currentItem].getStrVsBlock(par1Block);
+        
+        //-----MB-Edited-----
+        if(isBattlemode()){
+        	if (this.extraInventory[this.currentItem - offset] != null){
+	            var2 *= this.extraInventory[this.currentItem - offset].getStrVsBlock(par1Block);
+	        }
+        }else{
+	        if (this.mainInventory[this.currentItem] != null)
+	        {
+	            var2 *= this.mainInventory[this.currentItem].getStrVsBlock(par1Block);
+	        }
         }
 
         return var2;
@@ -548,6 +625,19 @@
                 par1NBTTagList.appendTag(var3);
             }
         }
+        
+        //-----MB-Edited-----
+        for (var2 = 0; var2 < this.extraInventory.length; ++var2)
+        {
+            if (this.extraInventory[var2] != null)
+            {
+                var3 = new NBTTagCompound();
+                //This will actually produce -ve numbers. Doesn't adversely affect the game
+                var3.setByte("Slot", (byte)(var2 + offset));
+                this.extraInventory[var2].writeToNBT(var3);
+                par1NBTTagList.appendTag(var3);
+            }
+        }
 
         return par1NBTTagList;
     }
@@ -559,6 +649,8 @@
     {
         this.mainInventory = new ItemStack[36];
         this.armorInventory = new ItemStack[4];
+        //-----MB-Edited-----
+        this.extraInventory = new ItemStack[MAXSIZE];
 
         for (int var2 = 0; var2 < par1NBTTagList.tagCount(); ++var2)
         {
@@ -577,8 +669,15 @@
                 {
                     this.armorInventory[var4 - 100] = var5;
                 }
-            }
-        }
+                
+                //-----MB-dited-----
+                if (var4 >= 100 && var4 < this.extraInventory.length + offset){
+                    this.extraInventory[var4 - offset] = var5;
+                }
+            }
+        }
+        
+        
     }
 
     /**
@@ -595,6 +694,12 @@
     public ItemStack getStackInSlot(int par1)
     {
         ItemStack[] var2 = this.mainInventory;
+        
+        //-----MB-edited-----
+        if(par1 >= offset){
+        	var2 = extraInventory;
+        	par1 -= offset;
+        }
 
         if (par1 >= var2.length)
         {
@@ -724,6 +829,16 @@
                 this.armorInventory[var1] = null;
             }
         }
+        
+        //-----MB-Edited-----
+        for (var1 = 0; var1 < this.extraInventory.length; ++var1)
+        {
+            if (this.extraInventory[var1] != null)
+            {
+                this.player.dropPlayerItemWithRandomChoice(this.extraInventory[var1], true);
+                this.extraInventory[var1] = null;
+            }
+        }
     }
 
     /**
@@ -758,6 +873,15 @@
     public boolean hasItemStack(ItemStack par1ItemStack)
     {
         int var2;
+        
+        //-----MB-Edited-----
+        for (var2 = 0; var2 < this.extraInventory.length; ++var2)
+        {
+            if (this.extraInventory[var2] != null && this.extraInventory[var2].isItemEqual(par1ItemStack))
+            {
+                return true;
+            }
+        }
 
         for (var2 = 0; var2 < this.armorInventory.length; ++var2)
         {
@@ -798,7 +922,23 @@
         {
             this.armorInventory[var2] = ItemStack.copyItemStack(par1InventoryPlayer.armorInventory[var2]);
         }
+        
+        //-----MB-Edited-----
+        for (var2 = 0; var2 < this.extraInventory.length; ++var2)
+        {
+            this.extraInventory[var2] = ItemStack.copyItemStack(par1InventoryPlayer.extraInventory[var2]);
+        }
 
         this.currentItem = par1InventoryPlayer.currentItem;
     }
+    
+    //-----MB-AddMethod-----
+    public boolean isBattlemode(){
+    	return this.currentItem < offset + 6 && this.currentItem >= offset;
+    }
+    
+    //-----MB-AddMethod-----
+    public static boolean isValidSwitch(int id) {
+		return (id >= 0 && id < getHotbarSize()) || (id >= offset && id < offset+6);
+	}
 }
