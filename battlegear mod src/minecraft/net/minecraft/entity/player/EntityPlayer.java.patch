@@ -54,7 +54,19 @@
 
 import java.util.*;
 
-public abstract class EntityPlayer extends EntityLivingBase implements ICommandSender {
+public abstract class EntityPlayer extends EntityLivingBase implements ICommandSender, mods.battlegear2.api.core.IBattlePlayer {
+    /*
+	 * Mine & Blade: Notes Edits made by: nerd-boy
+	 *
+	 * Edits: 4 Added Methods: 6 Added Fields: 5
+	 *
+	 * Adding methods and fields is relatively easy. Some of the methods
+	 * provided are not needed, they do however provide more simple access.
+	 *
+	 * The only other edit is to replace the instance of Inventory player with
+	 * the custom Inventory class. It has also been marked as final to prevent
+	 * other mods changing this later.
+	 */
     public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
     private HashMap<Integer, ChunkCoordinates> spawnChunkMap = new HashMap<Integer, ChunkCoordinates>();
     private HashMap<Integer, Boolean> spawnForcedMap = new HashMap<Integer, Boolean>();
@@ -62,7 +74,7 @@
     /**
      * Inventory of the player
      */
-    public InventoryPlayer inventory = new InventoryPlayer(this);
+    public InventoryPlayer inventory = new mods.battlegear2.api.core.InventoryPlayerBattle(this);
     private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
     /**
      * The Container for the player's inventory (which opens when they press E)
@@ -177,6 +189,7 @@
         this.dataWatcher.addObject(16, Byte.valueOf((byte) 0));
         this.dataWatcher.addObject(17, Float.valueOf(0.0F));
         this.dataWatcher.addObject(18, Integer.valueOf(0));
+        this.dataWatcher.addObject(25, Byte.valueOf((byte)0));//-----MB-Edited-----
     }
 
     /**
@@ -238,8 +251,7 @@
     public void onUpdate() {
         FMLCommonHandler.instance().onPlayerPreTick(this);
         if (this.itemInUse != null) {
-            ItemStack itemstack = this.inventory.getCurrentItem();
-
+            ItemStack itemstack = mods.battlegear2.api.core.BattlegearUtils.getCurrentItemOnUpdate(this, this.itemInUse);
             if (itemstack == this.itemInUse) {
                 itemInUseCount = ForgeEventFactory.onItemUseTick(this, itemInUse, itemInUseCount);
                 if (itemInUseCount <= 0) {
@@ -407,9 +419,8 @@
             this.updateItemUse(this.itemInUse, 16);
             int i = this.itemInUse.stackSize;
             ItemStack itemstack = this.itemInUse.onFoodEaten(this.worldObj, this);
+            itemstack = mods.battlegear2.api.core.BattlegearUtils.beforeFinishUseEvent(this, itemInUse, itemInUseCount, itemstack, i);//---MB-Edited---
 
-            itemstack = ForgeEventFactory.onItemUseFinish(this, itemInUse, itemInUseCount, itemstack);
-
             if (itemstack != this.itemInUse || itemstack != null && itemstack.stackSize != i) {
                 this.inventory.mainInventory[this.inventory.currentItem] = itemstack;
 
@@ -2004,7 +2015,7 @@
      */
     public void setCurrentItemOrArmor(int p_70062_1_, ItemStack p_70062_2_) {
         if (p_70062_1_ == 0) {
-            this.inventory.mainInventory[this.inventory.currentItem] = p_70062_2_;
+            mods.battlegear2.api.core.BattlegearUtils.setPlayerCurrentItem(this, p_70062_2_);//-----MB-Edited-----
         } else {
             this.inventory.armorInventory[p_70062_1_ - 1] = p_70062_2_;
         }
@@ -2229,5 +2240,79 @@
         NOT_SAFE;
 
         private static final String __OBFID = "CL_00001712";
+    }
+    /* ===================================== Battlegear2 START =====================================*/
+    // -----MB-addFields-----
+    public float offHandSwingProgress = 0.0F;
+    public float prevOffHandSwingProgress = 0.0F;
+    public int offHandSwingProgressInt = 0;
+    public boolean isOffHandSwingInProgress = false;
+    public int specialActionTimer = 0;
+    // -----MB-AddMethod-----
+    public void attackTargetEntityWithCurrentOffItem(Entity target) {
+        mods.battlegear2.api.core.BattlegearUtils.attackTargetEntityWithCurrentOffItem(this, target);
+    }
+    // -----MB-AddMethod-----
+    public void swingOffItem() {
+        if (!this.isOffHandSwingInProgress || this.offHandSwingProgressInt >= this.getArmSwingAnimationEndCopy() / 2 || this.offHandSwingProgressInt < 0) {
+            this.offHandSwingProgressInt = -1;
+            this.isOffHandSwingInProgress = true;
+        }
+    }
+    // -----MB-AddMethod-----
+    public float getOffSwingProgress(float frame) {
+        float diff = this.offHandSwingProgress - this.prevOffHandSwingProgress;
+        if (diff < 0.0F) {
+            ++diff;
+        }
+        return this.prevOffHandSwingProgress + diff * frame;
+    }
+    // -----MB-AddMethod-----
+    private int getArmSwingAnimationEndCopy() {
+        return this.isPotionActive(Potion.digSpeed) ? 6 - (1 + this.getActivePotionEffect(Potion.digSpeed).getAmplifier()) : (this.isPotionActive(Potion.digSlowdown) ? 6 + (1 + this.getActivePotionEffect(Potion.digSlowdown).getAmplifier()) * 2 : 6);
+    }
+    // -----MB-AddMethod----- (Overridden)
+    @Override
+    protected void updateArmSwingProgress() {
+        super.updateArmSwingProgress();
+        this.prevOffHandSwingProgress = this.offHandSwingProgress;
+        int var1 = this.getArmSwingAnimationEndCopy();
+        if (this.isOffHandSwingInProgress) {
+            ++this.offHandSwingProgressInt;
+            if (this.offHandSwingProgressInt >= var1) {
+                this.offHandSwingProgressInt = 0;
+                this.isOffHandSwingInProgress = false;
+            }
+        } else {
+            this.offHandSwingProgressInt = 0;
+        }
+        this.offHandSwingProgress = (float) this.offHandSwingProgressInt / (float) var1;
+        if(specialActionTimer > 0){
+            this.isOffHandSwingInProgress = false;
+            this.isSwingInProgress = false;
+            this.offHandSwingProgress = 0;
+            this.offHandSwingProgressInt = 0;
+            this.swingProgress = 0;
+            this.swingProgressInt = 0;
+        }
+    }
+    // -----MB-AddMethod-----
+    public boolean isBattlemode() {
+        return ((mods.battlegear2.api.core.InventoryPlayerBattle) inventory).isBattlemode();
+    }
+    //-----MB-AddMethod-----
+    public boolean isBlockingWithShield(){
+        if(((mods.battlegear2.api.core.InventoryPlayerBattle)inventory).getCurrentOffhandWeapon() != null && ((mods.battlegear2.api.core.InventoryPlayerBattle)inventory).getCurrentOffhandWeapon().getItem() instanceof mods.battlegear2.api.shield.IShield){
+            return dataWatcher.getWatchableObjectByte(25) > 0;
+        }else
+            return false;
+    }
+    //-----MB-AddMethod-----
+    public void setBlockingWithShield(boolean block){
+        if(block && ((mods.battlegear2.api.core.InventoryPlayerBattle)inventory).getCurrentOffhandWeapon() != null && ((mods.battlegear2.api.core.InventoryPlayerBattle)inventory).getCurrentOffhandWeapon().getItem() instanceof mods.battlegear2.api.shield.IShield){
+            dataWatcher.updateObject(25, (byte)1);
+        }else{
+            dataWatcher.updateObject(25, (byte)0);
+        }
     }
 }
